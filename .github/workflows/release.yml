name: Auto-release on PR merge

on:
  # ATM, this is the closest trigger to a PR merging
  push:
    branches:
      - master

jobs:
  auto-release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    outputs:
      auto-version: ${{ steps.auto-version.outputs.version }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download auto
        run: |
          #curl -vL -o - "$(curl -fsSL https://api.github.com/repos/intuit/auto/releases/latest | jq -r '.assets[] | select(.name == "auto-linux.gz") | .browser_download_url')" | gunzip > ~/auto
          # Pin to 10.16.1 so we don't break if & when
          # <https://github.com/intuit/auto/issues/1778> is fixed.
          wget -O- https://github.com/intuit/auto/releases/download/v10.16.1/auto-linux.gz | gunzip > ~/auto
          chmod a+x ~/auto

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '^3.7'

      - name: Install Python dependencies
        run: python -m pip install build bump2version twine

      - name: Check whether a release is due
        id: auto-version
        run: |
          version="$(~/auto version)"
          echo "::set-output name=version::$version"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        run: ~/auto shipit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  build-docker:
    runs-on: ubuntu-latest
    needs: auto-release
    if: needs.auto-release.outputs.auto-version != ''
    steps:
      - name: Get tag of latest release
        id: latest-release
        run: |
          latest_tag="$(curl -fsSL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r .tag_name)"
          echo "::set-output name=tag::$latest_tag"

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.latest-release.outputs.tag }}

      - name: Generate Dockerfile
        run: bash gen-docker-image.sh
        working-directory: utils

      - name: Build Docker images
        run: |
          docker build \
            -t nipy/heudiconv:master \
            -t nipy/heudiconv:latest \
            -t nipy/heudiconv:${{ steps.latest-release.outputs.tag }} \
            .

      - name: Push Docker images
        run: |
          docker login -u "$DOCKER_LOGIN" --password-stdin <<<"$DOCKER_TOKEN"
          docker push --all-tags nipy/heudiconv
        env:
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

# vim:set sts=2:
