#!/usr/bin/env python

"""Convert DICOM TimTrio dirs based on heuristic info

This function uses DicomStack and mri_convert to convert Siemens
TrioTim directories. It proceeds by extracting dicominfo from each
subject and writing a config file $subject_id/$subject_id.auto.txt in
the output directory. Users can create a copy of the file called
$subject_id.edit.txt and modify it to change the files that are
converted. This edited file will always overwrite the original file. If
there is a need to revert to original state, please delete this edit.txt
file and rerun the conversion

"""

__version__ = '0.1'

import argparse
from glob import glob
import inspect
import json
import os
import shutil
import sys
from tempfile import mkdtemp
import tarfile

from collections import namedtuple
from collections import defaultdict
from collections import OrderedDict as ordereddict
from os.path import isdir
from os.path import basename
from os.path import dirname
from os.path import exists

PY3 = sys.version_info[0] >= 3

import logging
lgr = logging.getLogger('heudiconv')
# Rudimentary logging support.  If you want it better -- we need to have
# more than one file otherwise it is not manageable
logging.basicConfig(
    format='%(levelname)s: %(message)s',
    level=getattr(logging, os.environ.get('HEUDICONV_LOGLEVEL', 'INFO'))
)
lgr.debug("Starting the abomination")  # just to "run-test" logging


SeqInfo = namedtuple(
    'SeqInfo',
    ['total_files_till_now',  # 0
     'example_dcm_file',      # 1
     'series_id',             # 2
     'unspecified1',          # 3
     'unspecified2',          # 4
     'unspecified3',          # 5
     'dim1', 'dim2', 'dim3', 'dim4', # 6, 7, 8, 9
     'TR', 'TE',              # 10, 11
     'protocol_name',         # 12
     'is_motion_corrected',   # 13
     # Introduced with namedtuple
     'is_derived',
     'patient_id',
     'study_description',
     'referring_physician_name',
     'series_description',
     'image_type',
     'accession_number',
     'patient_age',
     'patient_sex',
     ]
)

StudySessionInfo = namedtuple(
    'StudySessionInfo',
    [
        'locator',  # possible prefix identifying the study, e.g. PI/dataset or just a dataset or empty (default)
                    # Note that ATM there should be no multiple DICOMs with the same
                    # StudyInstanceUID which would collide, i.e point to the same
                    # subject/session.
                    # So 'locator' is pretty much an assignment from StudyInstanceUID
                    # into some place within hierarchy
        'session',  # could be None
        'subject',  # should be some ID defined either in cmdline or deduced
    ]
)


class TempDirs(object):
    """A helper to centralize handling and cleanup of dirs"""

    def __init__(self):
        self.dirs = []

    def __call__(self, prefix=None):
        tmpdir = mkdtemp(prefix=prefix)
        self.dirs.append(tmpdir)
        return tmpdir

    def __del__(self):
        self.cleanup()

    def cleanup(self):
        lgr.info("Removing %d temporary directories", len(self.dirs))
        for t in self.dirs[:]:
            lgr.debug("Removing %s", t)
            self.rmtree(t)

    def rmtree(self, tmpdir):
        if os.path.exists(tmpdir):
            shutil.rmtree(tmpdir)
        if tmpdir in self.dirs:
            self.dirs.remove(tmpdir)

tempdirs = TempDirs()


def save_json(filename, data):
    """Save data to a json file

    Parameters
    ----------
    filename : str
        Filename to save data in.
    data : dict
        Dictionary to save in json file.

    """
    with open(filename, 'w') as fp:
        json.dump(data, fp, sort_keys=True, indent=4)


def load_json(filename):
    """Load data from a json file

    Parameters
    ----------
    filename : str
        Filename to load data from.

    Returns
    -------
    data : dict

    """
    with open(filename, 'r') as fp:
        data = json.load(fp)
    return data


# They (https://github.com/nipy/heudiconv/issues/11#issuecomment-144665678)
# wanted it as a feature to have EVERYTHING in one file, so here you come
#

#
#  find_files utility copied/borrowed from DataLad (Copyright 2016 DataLad developers, MIT license)
#

import re
from os.path import sep as dirsep
from os.path import curdir
from os.path import join as opj

_VCS_REGEX = '%s\.(?:git|gitattributes|svn|bzr|hg)(?:%s|$)' % (dirsep, dirsep)


def find_files(regex, topdir=curdir, exclude=None, exclude_vcs=True, dirs=False):
    """Generator to find files matching regex

    Parameters
    ----------
    regex: basestring
    exclude: basestring, optional
      Matches to exclude
    exclude_vcs:
      If True, excludes commonly known VCS subdirectories.  If string, used
      as regex to exclude those files (regex: `%r`)
    topdir: basestring, optional
      Directory where to search
    dirs: bool, optional
      Either to match directories as well as files
    """

    for dirpath, dirnames, filenames in os.walk(topdir):
        names = (dirnames + filenames) if dirs else filenames
        # TODO: might want to uniformize on windows to use '/'
        paths = (opj(dirpath, name) for name in names)
        for path in filter(re.compile(regex).search, paths):
            path = path.rstrip(dirsep)
            if exclude and re.search(exclude, path):
                continue
            if exclude_vcs and re.search(_VCS_REGEX, path):
                continue
            yield path
find_files.__doc__ %= (_VCS_REGEX,)


def group_dicoms_into_seqinfos(fl, dcmfilter=None, per_studyUID=False):
    """Process list of dicoms and return seqinfo and file group

    `seqinfo` contains per-sequence extract of fields from DICOMs which
    will be later provided into heuristics to decide on filenames

    Parameters
    ----------
    fl : list of str
      List of files to consider
    dcmfilter : callable, optional
      If called on dcm_data and returns True, it is used to set
      series_id
    per_studyUID : bool, optional
      Then would add a StudyInstanceUID into study id.  So it would not then
      generalize across re-runs on new data.

    Returns
    -------
    seqinfo : list of list
      `seqinfo` is a list of info entries per each sequence (some entry 
      there defines a key for `filegrp`)
    filegrp : dict
      `filegrp` is a dictionary with files groupped per each sequence
    """
    lgr.info("Analyzing %d dicoms", len(fl))
    import dcmstack as ds
    import dicom as dcm

    groups = [[], []]
    mwgroup = []

    studyUID = None  # for sanity check that all DICOMs came from the same
                     # "study".  If not -- what is the use-case? (interrupted acquisition?)
                     # and how would then we deal with series numbers
                     # which would differ already
    for fidx, filename in enumerate(fl):
        mw = ds.wrapper_from_data(dcm.read_file(filename, force=True))

        for f in ('iop', 'ICE_Dims', 'SequenceName'):
            try:
                del mw.series_signature[f]
            except:
                pass

        try:
            studyUID_ = mw.dcm_data.StudyInstanceUID
        except AttributeError:
            #import pdb; pdb.set_trace()
            lgr.info("File %s is missing any StudyInstanceUID" % filename)
            studyUID_ = None
            #continue

        try:
            series_id = (int(mw.dcm_data.SeriesNumber),
                         mw.dcm_data.ProtocolName)
            studyUID_ = mw.dcm_data.StudyInstanceUID

            if not per_studyUID:
                # verify that we are working with a single study
                if studyUID is None:
                    studyUID = studyUID_
                else:
                    assert studyUID == studyUID_
        except AttributeError as exc:
            lgr.warning('Ignoring %s since not quite a "normal" DICOM: %s',
                        filename, exc)
            # not a normal DICOM -> ignore
            series_id = (-1, 'none')
            studyUID_ = None

        if not series_id[0] < 0:
            if dcmfilter is not None and dcmfilter(mw.dcm_data):
                series_id = (-1, mw.dcm_data.ProtocolName)

        if not groups:
            raise RuntimeError("Yarik really thinks this is never ran!")
            # if I was wrong -- then per_studyUID might need to go above
            # yoh: I don't think this would ever be executed!
            mwgroup.append(mw)
            groups[0].append(series_id)
            groups[1].append(len(mwgroup) - 1)
            continue

        # filter out unwanted non-image-data DICOMs by assigning
        # a series number < 0 (see test below)
        if not series_id[0] < 0 and mw.dcm_data[0x0008, 0x0016].repval in (
                'Raw Data Storage',
                'GrayscaleSoftcopyPresentationStateStorage'):
            series_id = (-1, mw.dcm_data.ProtocolName)

        if per_studyUID:
            series_id = series_id + (studyUID_,)


        #print fidx, N, filename
        ingrp = False
        for idx in range(len(mwgroup)):
            same = mw.is_same_series(mwgroup[idx])
            #print idx, same, groups[idx][0]
            if same:
                # the same series should have the same study uuid
                assert mwgroup[idx].dcm_data.get('StudyInstanceUID', None) == studyUID_
                ingrp = True
                if series_id[0] >= 0:
                    series_id = (mwgroup[idx].dcm_data.SeriesNumber,
                                 mwgroup[idx].dcm_data.ProtocolName)
                    if per_studyUID:
                        series_id = series_id + (studyUID_,)
                groups[0].append(series_id)
                groups[1].append(idx)

        if not ingrp:
            mwgroup.append(mw)
            groups[0].append(series_id)
            groups[1].append(len(mwgroup) - 1)

    group_map = dict(zip(groups[0], groups[1]))

    total = 0
    seqinfo = ordereddict()

    # for the next line to make any sense the series_id needs to
    # be sortable in a way that preserves the series order
    for series_id, mwidx in sorted(group_map.items()):
        if series_id[0] < 0:
            # skip our fake series with unwanted files
            continue
        mw = mwgroup[mwidx]
        if mw.image_shape is None:
            # this whole thing has now image data (maybe just PSg DICOMs)
            # nothing to see here, just move on
            continue
        dcminfo = mw.dcm_data
        files = [fl[i] for i, s in enumerate(groups[0]) if s == series_id]
        # turn the series_id into a human-readable string -- string is needed
        # for JSON storage later on
        if per_studyUID:
            studyUID = series_id[2]
            series_id = series_id[:2]

        series_id = '-'.join(map(str, series_id))

        size = list(mw.image_shape) + [len(files)]
        total += size[-1]
        if len(size) < 4:
            size.append(1)
        try:
            TR = float(dcminfo.RepetitionTime) / 1000.
        except AttributeError:
            TR = -1
        try:
            TE = float(dcminfo.EchoTime)
        except AttributeError:
            TE = -1

        info = SeqInfo(
            total,
            os.path.split(files[0])[1],
            series_id,
            '-', '-', '-',
            size[0], size[1], size[2], size[3],
            TR, TE,
            dcminfo.ProtocolName,
            'MoCo' in dcminfo.SeriesDescription,
            # New ones by us
            'derived' in [x.lower() for x in dcminfo.get('ImageType', [])],
            dcminfo.PatientID,
            dcminfo.StudyDescription,
            dcminfo.ReferringPhysicianName,
            dcminfo.SeriesDescription,
            tuple(dcminfo.ImageType),
            dcminfo.AccessionNumber,
            # For demographics to populate BIDS participants.tsv
            dcminfo.PatientsAge,
            dcminfo.PatientsSex,
        )
        # candidates
        # dcminfo.AccessionNumber
        #   len(dcminfo.ReferencedImageSequence)
        #   len(dcminfo.SourceImageSequence)
        # FOR demographics
        lgr.debug("%30s %27s %27s %5s nref=%-2d nsrc=%-2d %s" % (
            info.series_id,
            dcminfo.SeriesDescription,
            dcminfo.ProtocolName,
            info.is_derived,
            len(dcminfo.get('ReferencedImageSequence', '')),
            len(dcminfo.get('SourceImageSequence', '')),
            info.image_type
        ))
        if per_studyUID:
            if studyUID not in seqinfo:
                seqinfo[studyUID] = ordereddict()
            seqinfo[studyUID][info] = files
        else:
            seqinfo[info] = files

    if per_studyUID:
        lgr.info("Generated sequence info for %d studies with %d entries total",
                 len(seqinfo), sum(map(len, seqinfo.values())))
    else:
        lgr.info("Generated sequence info with %d entries", len(seqinfo))
    return seqinfo


def write_config(outfile, info):
    from pprint import PrettyPrinter
    with open(outfile, 'wt') as fp:
        fp.writelines(PrettyPrinter().pformat(info))


def read_config(infile):
    with open(infile, 'rt') as fp:
        info = eval(fp.read())
    return info


def conversion_info(subject, outdir, info, filegroup, ses=None):
    convert_info = []
    for key, items in info.items():
        if not items:
            continue
        template = key[0]
        outtype = key[1]
        # So no annotation_classes of any kind!  so if not used -- what was the
        # intension???? XXX
        outpath = outdir
        for idx, itemgroup in enumerate(items):
            if not isinstance(itemgroup, list):
                itemgroup = [itemgroup]
            for subindex, item in enumerate(itemgroup):
                parameters = {}
                if isinstance(item, dict):
                    parameters = {k: v for k, v in item.items()}
                    item = parameters['item']
                    del parameters['item']

                # some helper meta-varaibles
                parameters.update(dict(
                    item=idx + 1,
                    subject=subject,
                    seqitem=item,
                    subindex=subindex + 1,
                    session='ses-' + str(ses), # if not used -- not used -- not a problem
                    bids_subject_session_prefix=
                        'sub-%s' % subject + (('_ses-%s' % ses) if ses else ''),
                    bids_subject_session_dir=
                        'sub-%s' % subject + (('/ses-%s' % ses) if ses else ''),
                    # referring_physician_name
                    # study_description
                ))

                try:
                    files = filegroup[item]
                except KeyError:
                    files = filegroup[(str if PY3 else unicode)(item)]
                outprefix = template.format(**parameters)
                convert_info.append((os.path.join(outpath, outprefix), outtype, files))
    return convert_info


def embed_nifti(dcmfiles, niftifile, infofile, bids_info=None, force=False):
    import dcmstack as ds
    import nibabel as nb
    import os
    import json
    stack = ds.parse_and_stack(dcmfiles, force=force).values()
    if len(stack) > 1:
        raise ValueError('Found multiple series')
    stack = stack[0]

    #Create the nifti image using the data array
    if not os.path.exists(niftifile):
        nifti_image = stack.to_nifti(embed_meta=True)
        nifti_image.to_filename(niftifile)
        return ds.NiftiWrapper(nifti_image).meta_ext.to_json()

    orig_nii = nb.load(niftifile)
    aff = orig_nii.get_affine()
    ornt = nb.orientations.io_orientation(aff)
    axcodes = nb.orientations.ornt2axcodes(ornt)
    new_nii = stack.to_nifti(voxel_order=''.join(axcodes), embed_meta=True)
    meta = ds.NiftiWrapper(new_nii).meta_ext.to_json()
    meta_info = json.loads(meta)
    if bids_info:
        meta_info = dict(meta_info.items() + bids_info.items())
    with open(infofile, 'wt') as fp:
        json.dump(meta_info, fp, indent=0, sort_keys=True)
    return niftifile, infofile


def compress_dicoms(dicom_list, prefix, sourcedir):
    tmpdir = mkdtemp(prefix='dicomtar')
    outtar = os.path.join(sourcedir, prefix + '.dicom.tgz')
    if os.path.exists(outtar):
        raise RuntimeError("File %s already exists, will not override"
                           % outtar)
    with tarfile.open(outtar, 'w:gz', dereference=True) as tar:
        for filename in dicom_list:
            outfile = os.path.join(tmpdir, os.path.basename(filename))
            if not os.path.islink(outfile):
                os.symlink(os.path.realpath(filename), outfile)
            # place into archive stripping any lead directories and
            # adding the one corresponding to prefix
            tar.add(outfile,
                    arcname=opj(prefix, os.path.basename(outfile)),
                    recursive=False)
    tar.close()
    shutil.rmtree(tmpdir)


def safe_copyfile(src, dest):
    """Copy file but blow if destination name already exists
    """
    if os.path.isdir(dest):
        dest = os.path.join(dest, os.path.basename(src))
    if os.path.lexists(dest):
        raise ValueError("was asked to copy %s but destination already exists: %s"
                         % (src, dest))
    shutil.copyfile(src, dest)


def convert(items, symlink=True, converter=None,
        scaninfo_suffix='.json', custom_callable=None, with_prov=False,
        is_bids=False, sourcedir=None, outdir=None):
    prov_files = []
    tmpdir = mkdtemp(prefix='heudiconvtmp')
    for item_idx, item in enumerate(items):
        if isinstance(item[1], (list, tuple)):
            outtypes = item[1]
        else:
            outtypes = [item[1]]
        prefix = item[0]
        prefix_dirname = os.path.dirname(prefix + '.ext')
        prov_file = None
        outname_bids = prefix + '.json'
        outname_bids_files = []  # actual bids files since dcm2niix might generate multiple ATM
        lgr.info('Converting %s -> %s . Converter: %s',
                 prefix, prefix_dirname, converter)
        if not os.path.exists(prefix_dirname):
            os.makedirs(prefix_dirname)
        for outtype in outtypes:
            item_dicoms = item[2]
            lgr.info("Processing %d dicoms for output type %s",
                     len(item_dicoms), outtype)
            lgr.log(1, " those dicoms are: %s", item_dicoms)

            modality = basename(dirname(prefix)) if is_bids else None

            if outtype == 'dicom':
                if is_bids:
                    # mimic the same hierarchy location as the prefix
                    # although it could all have been done probably
                    # within heuristic really
                    sourcedir_ = os.path.join(
                        sourcedir,
                        os.path.dirname(
                            os.path.relpath(prefix, outdir)))
                    if not os.path.exists(sourcedir_):
                        os.makedirs(sourcedir_)
                    compress_dicoms(item_dicoms,
                                    os.path.basename(prefix),
                                    sourcedir_)
                else:
                    dicomdir = prefix + '_dicom'
                    if os.path.exists(dicomdir):
                        shutil.rmtree(dicomdir)
                    os.mkdir(dicomdir)
                    for filename in item_dicoms:
                        outfile = os.path.join(dicomdir, os.path.split(filename)[1])
                        if not os.path.islink(outfile):
                            if symlink:
                                os.symlink(filename, outfile)
                            else:
                                os.link(filename, outfile)
            elif outtype in ['nii', 'nii.gz']:
                outname = prefix + '.' + outtype
                scaninfo = prefix + scaninfo_suffix
                if not os.path.exists(outname):
                    if with_prov:
                        from nipype import config
                        config.enable_provenance()
                    from nipype import Function, Node
                    from nipype.interfaces.base import isdefined
                    if converter == 'mri_convert':
                        from nipype.interfaces.freesurfer.preprocess import MRIConvert
                        convertnode = Node(MRIConvert(), name='convert')
                        convertnode.base_dir = tmpdir
                        if outtype == 'nii.gz':
                            convertnode.inputs.out_type = 'niigz'
                        convertnode.inputs.in_file = item_dicoms[0]
                        convertnode.inputs.out_file = os.path.abspath(outname)
                        #cmd = 'mri_convert %s %s' % (item[2][0], outname)
                        #print(cmd)
                        #os.system(cmd)
                        res = convertnode.run()
                    elif converter in {'dcm2nii', 'dcm2niix'}:
                        from nipype.interfaces.dcm2nii import Dcm2nii, Dcm2niix
                        convertnode = Node(
                            {'dcm2nii': Dcm2nii,
                             'dcm2niix': Dcm2niix}[converter](),
                            name='convert')
                        convertnode.base_dir = tmpdir
                        # need to be abspaths!
                        item_dicoms = map(os.path.abspath, item_dicoms)
                        convertnode.inputs.source_names = item_dicoms
                        if converter == 'dcm2nii':
                            convertnode.inputs.gzip_output = outtype == 'nii.gz'
                        else:
                            convertnode.inputs.out_filename = os.path.basename(prefix_dirname)
                        convertnode.inputs.terminal_output = 'allatonce'
                        res = convertnode.run()

                        if isdefined(res.outputs.bvecs):
                            outname_bvecs = prefix + '.bvec'
                            outname_bvals = prefix + '.bval'
                            safe_copyfile(res.outputs.bvecs, outname_bvecs)
                            safe_copyfile(res.outputs.bvals, outname_bvals)

                        res_files = res.outputs.converted_files
                        if isinstance(res_files, list):
                            # TODO: move into a function
                            # by default just suffix them up
                            suffixes = None
                            # we should provide specific handling for fmap,
                            # dwi etc which might spit out multiple files
                            if is_bids:
                                if modality == 'fmap':
                                    # expected!
                                    suffixes = ["%d" % (i+1) for i in range(len(res_files))]
                            if not suffixes:
                                lgr.warning(
                                    "Following series files likely have "
                                    "multiple (%d) volumes (orientations?) "
                                    "generated: %s ...",
                                    len(res_files), item_dicoms[0]
                                )
                                suffixes = ['-%d' % (i+1) for i in range(len(res_files))]

                            # Also copy BIDS files although they might need to be merged/postprocessed later
                            if converter == 'dcm2niix' and isdefined(res.outputs.bids):
                                assert(len(res.outputs.bids) == len(res_files))
                                bids_files = res.outputs.bids
                            else:
                                bids_files = [None] * len(res_files)

                            for fl, suffix, bids_file in zip(res_files, suffixes, bids_files):
                                outname = "%s%s.%s" % (prefix, suffix, outtype)
                                safe_copyfile(fl, outname)
                                if bids_file:
                                    outname_bids_file = "%s%s.json" % (prefix, suffix)
                                    safe_copyfile(bids_file, outname_bids_file)
                                    outname_bids_files.append(outname_bids_file)

                        else:
                            safe_copyfile(res_files, outname)
                            if converter == 'dcm2niix' and isdefined(res.outputs.bids):
                                try:
                                    safe_copyfile(res.outputs.bids, outname_bids)
                                    outname_bids_files.append(outname_bids)
                                except TypeError as exc:  ##catch lists
                                    lgr.warning(
                                        "There was someone catching lists!: %s", exc
                                    )
                                    continue

                        # Fix up and unify BIDS files
                        tuneup_bids_json_files(outname_bids_files)
                        # we should provide specific handling for fmap,
                        # dwi etc .json of which should get merged to satisfy
                        # BIDS.  BUT wer might be somewhat not in time for a
                        # party here since we sorted into multiple seqinfo
                        # (e.g. magnitude, phase for fmap so we might want
                        # to sort them into a single one)

                    if with_prov:
                        prov_file = prefix + '_prov.ttl'
                        safe_copyfile(os.path.join(convertnode.base_dir,
                                                     convertnode.name,
                                                    'provenance.ttl'),
                                        prov_file)
                        prov_files.append(prov_file)

                if len(outname_bids_files) > 1:
                    lgr.warning(
                        "For now not embedding BIDS and info generated .nii.gz itself since sequence produced multiple files")
                else:
                    #if not is_bids or converter != 'dcm2niix': ##uses dcm2niix's infofile
                    embed_metadata_into_nifti(converter, is_bids, item_dicoms,
                                              outname, outname_bids, prov_file,
                                              scaninfo, tmpdir, with_prov)
                os.chmod(outname, 0o0440)


        if custom_callable is not None:
            custom_callable(*item)
    shutil.rmtree(tmpdir)


def tuneup_bids_json_files(json_files):
    """Given a list of BIDS .json files, e.g. """
    if not json_files:
        return

    # Harmonize generic .json formatting
    for jsonfile in json_files:
        json_ = json.load(open(jsonfile))
        json.dump(json_, open(jsonfile, 'w'), indent=2)

    # Load the beast
    modality = basename(dirname(jsonfile))

    if modality == 'fmap':
        json_basename = '_'.join(jsonfile.split('_')[:-1])
        # if we got by now all needed .json files -- we can fix them up
        # unfortunately order of "items" is not guaranteed atm
        if len(glob(json_basename + '*.json')) == 3:
            json_phasediffname = json_basename + '_phasediff.json'
            json_ = json.load(open(json_phasediffname))
            # TODO: we might want to reorder them since ATM
            # the one for shorter TE is the 2nd one!
            # For now just save truthfully by loading magnitude files
            lgr.info("Placing EchoTime fields into phasediff file")
            for i in 1, 2:
                json_['EchoTime%d' % i] = \
                    json.load(open(json_basename + '_magnitude%d.json' % i))[
                        'EchoTime']
            # might have been made R/O already
            os.chmod(json_phasediffname, 0o0660)
            json.dump(json_, open(json_phasediffname, 'w'), indent=2)
            os.chmod(json_phasediffname, 0o0440)

        # phasediff one should contain two PhaseDiff's
        #  -- one for original amplitude and the other already replicating what is there
        # so let's load json files for magnitudes and
        # place them into phasediff


def embed_metadata_into_nifti(converter, is_bids, item_dicoms, outname,
                              outname_bids, prov_file, scaninfo, tmpdir,
                              with_prov):
    from nipype import Node, Function
    embedfunc = Node(Function(input_names=['dcmfiles',
                                           'niftifile',
                                           'infofile',
                                           'bids_info',
                                           'force'],
                              output_names=['outfile',
                                            'meta'],
                              function=embed_nifti),
                     name='embedder')
    embedfunc.inputs.dcmfiles = item_dicoms
    embedfunc.inputs.niftifile = os.path.abspath(outname)
    embedfunc.inputs.infofile = os.path.abspath(scaninfo)
    if is_bids and (converter == 'dcm2niix'):
        embedfunc.inputs.bids_info = load_json(os.path.abspath(outname_bids))
    else:
        embedfunc.inputs.bids_info = None
    embedfunc.inputs.force = True
    embedfunc.base_dir = tmpdir
    cwd = os.getcwd()
    try:
        res = embedfunc.run()
        os.chmod(scaninfo, 0o0440)
        if with_prov:
            g = res.provenance.rdf()
            g.parse(prov_file,
                    format='turtle')
            g.serialize(prov_file, format='turtle')
            os.chmod(prov_file, 0o0440)
    except:
        os.chdir(cwd)



def convert_dicoms(sid,
                   dicoms,
                   outdir,
                   heuristic,
                   converter,
                   queue=None,
                   anon_sid_cmd=None, anon_outdir=None, with_prov=False,
                   ses=None,
                   is_bids=False,
                   seqinfo=None):
    if True:  # just to minimize diff for now, remove later and dedent
        #
        # TODO: Also better lives outside and just replicates all cmdline args?
        #
        if queue:
            if seqinfo and not dicoms:
                # flatten them all and provide into batching, which again
                # would group them... heh
                dicoms = sum(seqinfo.values(), [])
                # so
                raise NotImplementedError(
                    "we already groupped them so need to add a switch to avoid "
                    "any groupping, so no outdir prefix doubled etc"
                )
            # TODO This needs to be updated to better scale with additional args
            progname = os.path.abspath(inspect.getfile(inspect.currentframe()))
            convertcmd = ' '.join(['python', progname,
                                   '-o', outdir,
                                   '-f', heuristic.filename,
                                   '-s', sid,
                                   '-c', converter])
            if ses:
                convertcmd += " --ses '%s'" % ses
            if with_prov:
                convertcmd += " --with-prov"
            if is_bids:
                convertcmd += " --bids"
            convertcmd += ["'%s'" % f for f in dicoms]

            script_file = 'dicom-%s.sh' % sid
            with open(script_file, 'wt') as fp:
                fp.writelines(['#!/bin/bash\n', convertcmd])
            outcmd = 'sbatch -J dicom-%s -p %s -N1 -c2 --mem=20G %s' \
                     % (sid, queue, script_file)
            os.system(outcmd)
            return

        if dicoms:
            lgr.info("Processing %d dicoms", len(dicoms))
        elif seqinfo:
            lgr.info("Processing %d pre-sorted seqinfo entries", len(seqinfo))
        else:
            raise ValueError("neither dicoms nor seqinfo dict was provided")

        # in this reimplementation we can have only a single session assigned
        # at this point
        # dcmsessions =

        #
        # Annonimization
        #
        anon_sid = sid
        if anon_sid_cmd is not None:
            from subprocess import check_output
            anon_sid = check_output([anon_sid_cmd, sid]).strip()
            lgr.info("Annonimized sid %s into %s", sid, anon_sid)
        if anon_outdir is None:
            anon_outdir = outdir

        # Figure out where to stick supplemental info dicoms
        idir = os.path.join(outdir, '.heudiconv', sid)
        if is_bids and ses:
            idir = os.path.join(idir, 'ses-%s' % str(ses))
        # yoh: in my case if idir exists, it means that that study/subject/session
        # is already processed
        if anon_outdir == outdir:
            # if all goes into a single dir, have a dedicated 'info' subdir
            idir = os.path.join(idir, 'info')
        if not os.path.exists(idir):
            os.makedirs(idir)

        shutil.copy(heuristic.filename, idir)
        ses_suffix = "_ses-%s" % ses if ses is not None else ""
        info_file = os.path.join(idir, '%s%s.auto.txt' % (sid, ses_suffix))
        edit_file = os.path.join(idir, '%s%s.edit.txt' % (sid, ses_suffix))
        filegroup_file = os.path.join(idir, 'filegroup%s.json' % ses_suffix)

        if os.path.exists(edit_file):  # XXX may be condition on seqinfo is None
            lgr.info("Reloading existing filegroup.json because %s exists",
                     edit_file)
            info = read_config(edit_file)
            filegroup = load_json(filegroup_file)
            # XXX Yarik finally understood why basedir was dragged along!
            # So we could reuse the same PATHs definitions possibly consistent
            # across re-runs... BUT that wouldn't work anyways if e.g.
            # DICOMs dumped with SOP UUIDs thus differing across runs etc
            # So either it would need to be brought back or reconsidered altogether
            # (since no sample data to test on etc)
        else:
            # TODO -- might have been done outside already!
            if dicoms:
                seqinfo = group_dicoms_into_seqinfos(
                    dicoms,
                    dcmfilter=getattr(heuristic, 'filter_dicom', None))
            seqinfo_list = list(seqinfo.keys())
            filegroup = {si.series_id: x for si, x in seqinfo.items()}

            save_json(filegroup_file, filegroup)
            dicominfo_file = os.path.join(idir, 'dicominfo%s.tsv' % ses_suffix)
            with open(dicominfo_file, 'wt') as fp:
                for seq in seqinfo_list:
                    fp.write('\t'.join([str(val) for val in seq]) + '\n')
            lgr.debug("Calling out to %s.infodict", heuristic)
            info = heuristic.infotodict(seqinfo_list)
            write_config(info_file, info)
            write_config(edit_file, info)

        #
        # Conversion
        #

        sourcedir = None
        if is_bids:
            sourcedir = os.path.join(outdir, 'sourcedata')
            # the other portion of the path would mimic BIDS layout
            # so we don't need to worry here about sub, ses at all
            tdir = anon_outdir
        else:
            tdir = os.path.join(anon_outdir, anon_sid)

        if converter != 'none':
            lgr.info("Doing conversion using %s", converter)
            cinfo = conversion_info(anon_sid, tdir, info, filegroup,
                                    ses=ses)
            convert(cinfo,
                    converter=converter,
                    scaninfo_suffix=getattr(
                        heuristic, 'scaninfo_suffix', '.json'),
                    custom_callable=getattr(
                        heuristic, 'custom_callable', None),
                    with_prov=with_prov,
                    is_bids=is_bids,
                    sourcedir=sourcedir,
                    outdir=tdir)


def get_extracted_dicoms(fl):
    """Given a list of files, possibly extract some from tarballs

    For 'classical' heudiconv, if multiple tarballs are provided, they correspond
    to different sessions, so here we would group into sessions and return
    pairs  `sessionid`, `files`  with `sessionid` being None if no "sessions"
    detected for that file or there was just a single tarball in the list
    """
    # TODO: bring check back?
    # if any(not tarfile.is_tarfile(i) for i in fl):
    #     raise ValueError("some but not all input files are tar files")

    # tarfiles already know what they contain, and often the filenames
    # are unique, or at least in a unqiue subdir per session
    # strategy: extract everything in a temp dir and assemble a list
    # of all files in all tarballs
    tmpdir = tempdirs(prefix='heudiconvtmp')

    sessions = defaultdict(list)
    session = 0
    if not isinstance(fl, (list, tuple)):
        fl = list(fl)

    # needs sorting to keep the generated "session" label deterministic
    for i, t in enumerate(sorted(fl)):
        # "classical" heudiconv has that heuristic to handle multiple
        # tarballs as providing different sessions per each tarball
        if not tarfile.is_tarfile(t):
            sessions[None].append(t)
            continue  # the rest is tarball specific

        tf = tarfile.open(t)
        # check content and sanitize permission bits
        tmembers = tf.getmembers()
        for tm in tmembers:
            tm.mode = 0o700
        # get all files, assemble full path in tmp dir
        tf_content = [m.name for m in tmembers if m.isfile()]
        # store full paths to each file, so we don't need to drag along
        # tmpdir as some basedir
        sessions[session] = [opj(tmpdir, f) for f in tf_content]
        session += 1
        # extract into tmp dir
        tf.extractall(path=tmpdir, members=tmembers)

    if session == 1:
        # we had only 1 session, so no really multiple sessions according
        # to classical 'heudiconv' assumptions, thus just move them all into
        # None
        sessions[None] += sessions.pop(0)

    return sessions.items()


def load_heuristic(heuristic_file):
    """Load heuristic from the file, return the module
    """
    path, fname = os.path.split(heuristic_file)
    sys.path.append(path)
    mod = __import__(fname.split('.')[0])
    mod.filename = heuristic_file
    return mod


def get_study_sessions(dicom_dir_template, files_opt, heuristic, outputdir,
                       session, subjs):
    """Given options from cmdline sort files or dicom seqinfos into
    study_sessions which put together files for a single session of a subject
    in a study

    Two major possible workflows:
    - if dicom_dir_template provided -- doesn't pre-load DICOMs and just
      loads files pointed by each subject and possibly sessions as corresponding
      to different tarballs
    - if files_opt is provided, sorts all DICOMs it can find under those paths
    """
    study_sessions = {}
    if dicom_dir_template:
        dicom_dir_template = os.path.abspath(dicom_dir_template)
        assert not files_opt  # see above TODO
        assert subjs
        # expand the input template
        if '%s' not in dicom_dir_template:
            raise ValueError(
                "dicom dir template must have '%s' as a placeholder for a "
                "subject id.  Got %r" % dicom_dir_template)
        for sid in subjs:
            sdir = dicom_dir_template % sid
            # and see what matches
            files = sorted(glob(sdir))
            for session_, files_ in get_extracted_dicoms(files):
                if session_ is not None and session:
                    lgr.warning(
                        "We had session specified (%s) but while analyzing "
                        "files got a new value %r (using it instead)"
                        % (session, session_))
                # in this setup we do not care about tracking "studies" so
                # locator would be the same None
                study_sessions[
                    StudySessionInfo(
                        None,
                        session_ if session_ is not None else session,
                        sid,
                    )] = files_
    else:
        # prep files
        assert (files_opt)
        assert (not subjs)
        files = []
        for f in files_opt:
            if isdir(f):
                files += sorted(find_files(
                    '.*', topdir=f, exclude_vcs=True, exclude="/\.datalad/"))
            else:
                files.append(f)

        # in this scenario we don't care about sessions obtained this way
        files_ = []
        for _, files_ex in get_extracted_dicoms(files):
            files_ += files_ex

        # sort all DICOMS using heuristic
        # TODO:  this one is not groupping by StudyUID but may be we should!
        #import pdb; pdb.set_trace()
        seqinfo_dict = group_dicoms_into_seqinfos(
            files_,
            dcmfilter=getattr(heuristic, 'filter_dicom', None),
            per_studyUID=True)

        if not getattr(heuristic, 'infotoids', None):
            raise NotImplementedError(
                "For now, if no subj template is provided, requiring "
                "heuristic to have infotoids")

        for studyUID, seqinfo in seqinfo_dict.items():
            # so we have a single study, we need to figure out its
            # locator, session, subject
            # TODO: Try except to ignore those we can't handle?
            # actually probably there should be a dedicated exception for
            # heuristics to throw if they detect that the study they are given
            # is not the one they would be willing to work on
            ids = heuristic.infotoids(seqinfo.keys(), outputdir=outputdir)
            # TODO:  probably infotoids is doomed to do more and possibly
            # split into multiple sessions!!!! but then it should be provided
            # full seqinfo with files which it would place into multiple groups
            study_session_info = StudySessionInfo(
                ids.get('locator'),
                ids.get('session', session),
                ids.get('subject', None))
            if study_session_info in study_sessions:
                raise ValueError(
                    "We already have a study session with the same value %s"
                    % study_session_info)
            study_sessions[study_session_info] = seqinfo

    return study_sessions


#
# Additional handlers
#
def is_interactive():
    """Return True if all in/outs are tty"""
    # TODO: check on windows if hasattr check would work correctly and add value:
    #
    return sys.stdin.isatty() and sys.stdout.isatty() and sys.stderr.isatty()


def create_file_if_missing(filename, content):
    """Create file if missing, so we do not override any possibly introduced changes"""
    if exists(filename):
        return False
    with open(filename, 'w') as f:
        f.write(content)
    return True


def populate_bids_templates(path):
    # dataset descriptor
    descriptor = opj(path, 'dataset_description.json')
    if not exists(descriptor):
        save_json(descriptor,
              ordereddict([
                  ('Name', "TODO: name of the dataset"),
                  ('BIDSVersion', "1.0.1"),
                  ('License', "TODO: choose a license, e.g. PDDL (http://opendatacommons.org/licenses/pddl/)"),
                  ('Authors', ["TODO:", "First1 Last1", "First2 Last2", "..."]),
                  ('Acknowledgements', "We thank Terry Sacket and the rest of the DBIC (Dartmouth Brain Imaging Center) personnel for assistance in data collection. TODO: more"),
                  ('HowToAcknowledge', "TODO: describe how to acknowledge -- either cite a corresponding paper, or just in acknowledgement section"),
                  ('Funding', ["TODO", "GRANT #1", "GRANT #2"]),
                  ('ReferencesAndLinks', ["TODO", "List of papers or websites"]),
                  ('DatasetDOI', 'TODO: eventually a DOI for the dataset')
        ]))

    sourcedata_README = opj(path, 'sourcedata', 'README')
    if exists(dirname(sourcedata_README)):
        create_file_if_missing(
            sourcedata_README,
            """\
TODO: Provide description about source data, e.g.

Directory below contains DICOMS compressed into tarballs per each sequence,
replicating directory hierarchy of the BIDS dataset itself.
""")

    create_file_if_missing(
        opj(path, 'CHANGES'),
        """\
0.0.1  Initial data acquired

TODOs:
  - verify and possibly extend information in participants.tsv
    (see for example http://datasets.datalad.org/?dir=/openfmri/ds000208)
  - fill out dataset_description.json, README, sourcedata/README (if present)
  - provide _events.tsv file for each _bold.nii.gz with onsets of events
    (see  "8.5 Task events"  of BIDS specification)
""")

    create_file_if_missing(
        opj(path, 'README'),
        """\
TODO: Provide description for the dataset -- basic details about the study,
possibly pointing to pre-registration (if public or embargoed)
""")


def add_participant_record(studydir, subject, age, sex):
    participants_tsv = opj(studydir, 'participants.tsv')
    participant_id = 'sub-%s' % subject

    if not create_file_if_missing(
        participants_tsv,
        '\t'.join(['participant_id', 'age', 'sex', 'group']) + '\n'
    ):
        # check if may be subject record already exists
        with open(participants_tsv) as f:
            f.readline()
            known_subjects = {l.split('\t')[0] for l in f.readlines()}
        if participant_id in known_subjects:
            # already there -- not adding
            return

    # Add a new participant
    with open(participants_tsv, 'a') as f:
        f.write('\t'.join(map(str, [
            participant_id,
            age.lstrip('0').rstrip('Y'),
            sex,
            'control']))
        + '\n')


def add_to_datalad(topdir, studydir, bids=False):
    """Do all necessary preparations (if were not done before) and save
    """
    from datalad.api import create
    from datalad.api import Dataset

    studyrelpath = os.path.relpath(studydir, topdir)
    assert not studyrelpath.startswith(os.path.pardir)  # so we are under
    # now we need to test and initiate a DataLad dataset all along the path
    curdir = topdir
    for subdir in [''] + studyrelpath.split(os.path.sep):
        curdir = opj(curdir, subdir)
        ds = Dataset(curdir)
        if not ds.is_installed():
            lgr.info("Initiating %s", ds)
            ds_ = create(curdir, force=True, annex_version=6)
            assert ds == ds_
        assert ds.is_installed()

    create_file_if_missing(
            opj(studydir, '.gitattributes'),
            """\
* annex.largefiles=(largerthan=100kb)
*.json annex.largefiles=nothing
*.txt annex.largefiles=nothing
*.tsv annex.largefiles=nothing
""")
    # so for mortals it just looks like a regular directory!
    ds.config.add('annex.thin', 'true', where='local')
    # Let's make it a
    dstop = Dataset(topdir)
    dstop.save(auto_add_changes=True, recursive=True)

    # TODO:  they are still appearing as native annex symlinked beasts
    """
    TODOs:
    it needs
    - unlock  (thin will be in effect)
    - save/commit (does modechange 120000 => 100644

    - we should mark dicoms and anatomicals as distribution-restricted
    - could potentially somehow automate that all:
      http://git-annex.branchable.com/tips/automatically_adding_metadata/
    - possibly even make separate sub-datasets for originaldata, derivatives ?
    """


_sys_excepthook = sys.excepthook  # Just in case we ever need original one


def setup_exceptionhook():
    """Overloads default sys.excepthook with our exceptionhook handler.

       If interactive, our exceptionhook handler will invoke
       pdb.post_mortem; if not interactive, then invokes default handler.
    """

    def _pdb_excepthook(type, value, tb):
        if is_interactive():
            import traceback
            import pdb
            traceback.print_exception(type, value, tb)
            print()
            pdb.post_mortem(tb)
        else:
            lgr.warn("We cannot setup exception hook since not in interactive mode")
            _sys_excepthook(type, value, tb)

    sys.excepthook = _pdb_excepthook


def main(args=None):
    docstr = '\n'.join((__doc__,
"""
           Example:

           heudiconv -d rawdata/%s -o . -f heuristic.py -s s1 s2
s3
"""))
    parser = argparse.ArgumentParser(description=docstr)
    parser.add_argument('--version', action='version', version=__version__)
    parser.add_argument('-d', '--dicom_dir_template',
                        dest='dicom_dir_template',
                        required=False,
                        help='''location of dicomdir that can be indexed with
                        subject id. Tarballs (can be compressed) are supported
                        in additions to directory. All matching tarballs for a
                        subject are extracted and their content processed in
                        a single pass''')
    parser.add_argument('-s', '--subjects', dest='subjs',
                        type=str, nargs='*',
                        help='list of subjects. If not provided, DICOMS would '
                             'first be "sorted" and subject IDs deduced by the '
                             'heuristic')
    parser.add_argument('-c', '--converter', dest='converter',
                        required=True,
                        choices=('mri_convert', 'dcmstack', 'dcm2nii', 'dcm2niix',
                                 'none'),
                        help='''tool to use for dicom conversion. Setting to 
                        "none" disables the actual conversion step -- useful
                        for testing heuristics.''')
    parser.add_argument('-o', '--outdir', dest='outputdir',
                        default=os.getcwd(),
                        help='''output directory for conversion setup (for
                        further customization and future reference. This
                        directory will refer to non-anonymized subject IDs''')
    parser.add_argument('-a', '--conv-outdir', dest='conv_outputdir',
                        default=None,
                        help='''output directory for converted files. By
                        default this is identical to --outdir. This option is
                        most useful in combination with --anon-cmd''')
    parser.add_argument('--anon-cmd', dest='anon_cmd',
                        default=None,
                        help='''command to run to convert subject IDs used for
                        DICOMs to anonymmized IDs. Such command must take a
                        single argument and return a single anonymized ID.
                        Also see --conv-outdir''')
    parser.add_argument('-f', '--heuristic', dest='heuristic_file', required=True,
                        help='python script containing heuristic')
    parser.add_argument('-q', '--queue', dest='queue', default=None,
                        help='''select batch system to submit jobs to instead
                        of running the conversion serially''')
    parser.add_argument('-p', '--with-prov', dest='with_prov', action='store_true',
                        help='''Store additional provenance information. Requires python-rdflib.''')
    parser.add_argument('-ss', '--ses', dest='session', default=None,
                        help='''session for longitudinal study_sessions, default is none''')
    parser.add_argument('-b', '--bids', dest='bids', action='store_true',
                        help='''flag for output into BIDS structure''')
    parser.add_argument('--datalad', dest='datalad', action='store_true',
                        help='''Store the entire collection as DataLad dataset(s).
                        Small files will be committed directly to git, while large to annex.
                        New version (6) of annex repositories will be used in a "thin"
                        mode so it would look to mortals as just any other regular directory
                        (i.e. no symlinks to under .git/annex).  For now just for BIDS mode.''')
    parser.add_argument('--dbg', action='store_true', dest='debug',
                        help="do not catch exceptions and show exception traceback")

    parser.add_argument(
        'files',
        nargs='*',
        help="files (tarballs, dicoms) or directories containing files to "
             "process. Specify one of the --dicom_dir_template or files "
             "not both")

    args = parser.parse_args(args)

    # TODO:  deprecate dicom_dir_template in favor of --files-templated or
    # smth like that which could take {subject} {session} ... and process
    # files argument(s) correspondingly before passing into group_dicoms_into_seqinfos

    if args.files and args.dicom_dir_template:
        raise ValueError("Specify files or dicom_dir_template, not both")

    if args.debug:
        setup_exceptionhook()

    #
    # Load heuristic -- better do it asap to make sure it loads correctly
    #
    heuristic = load_heuristic(os.path.realpath(args.heuristic_file))

    #
    # Deal with provided files or templates
    #

    #
    # pre-process provided list of files and possibly sort into groups/sessions
    #

    # for now will be just
    # Group files per each study/subject/session

    dicom_dir_template = args.dicom_dir_template
    files_opt = args.files
    session = args.session
    subjs = args.subjs
    outputdir = os.path.abspath(args.outputdir)

    # TODO: Move into a function!
    study_sessions = get_study_sessions(dicom_dir_template, files_opt,
                                        heuristic, outputdir, session, subjs)# extract tarballs, and replace their entries with expanded lists of files
    # TODO: we might need to sort so sessions are ordered???
    lgr.info("Need to process %d study sessions", len(study_sessions))

    processed_studydirs = set()

    for (locator, session, subject), files_or_seqinfo in study_sessions.items():

        if not len(files_or_seqinfo):
            raise ValueError("nothing to process?")
        # that is how life is ATM :-/ since we don't do sorting if subj
        # template is provided
        if isinstance(files_or_seqinfo, dict):
            assert(isinstance(list(files_or_seqinfo.keys())[0], SeqInfo))
            files = None
            seqinfo = files_or_seqinfo
        else:
            files = files_or_seqinfo
            seqinfo = None

        study_outputdir = opj(outputdir, locator or '')

        # TODO: --datalad  cmdline option, which would take care about initiating
        # the outputdir -> study_outputdir datasets if not yet there

        convert_dicoms(
                   subject,
                   files,
                   study_outputdir,
                   heuristic=heuristic,
                   converter=args.converter,
                   queue=args.queue,
                   anon_sid_cmd=args.anon_cmd,
                   anon_outdir=args.conv_outputdir,
                   with_prov=args.with_prov,
                   ses=session,
                   is_bids=args.bids,
                   seqinfo=seqinfo)

        if args.bids and seqinfo:
            add_participant_record(study_outputdir,
                                   subject,
                                   seqinfo.keys()[0].patient_age,
                                   seqinfo.keys()[0].patient_sex,
                                   )
        processed_studydirs.add(study_outputdir)

    if args.bids:
        # Let's populate BIDS templates for folks to take care about
        for study_outputdir in processed_studydirs:
            populate_bids_templates(study_outputdir)
            if args.datalad:
                add_to_datalad(outputdir, study_outputdir, bids=args.bids)

            # TODO: record_collection of the subject/session although that information
            # is pretty much present in .heudiconv/SUBJECT/info so we could just poke there

    tempdirs.cleanup()


if __name__ == '__main__':
    main()